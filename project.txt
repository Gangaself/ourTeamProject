一、项目概述
投资组合管理系统是一个基于 Node.js 和 Express 的后端 RESTful API 的投资组合项目。该系统允许用户创建、查看、删除和更新投资组合，同时提供资产、市场数据和交易记录的管理功能。前端部分使用 HTML、CSS 和 JavaScript 构建，提供了用户界面来展示和操作这些数据。
二、系统架构
1. 整体架构
系统采用前后端分离的架构模式，通过 RESTful API 进行通信，确保各组件的独立性和可扩展性。
┌───────────────────────┐     ┌───────────────────────┐
│        前端层         │     │        后端层         │
│  (浏览器客户端)        │     │  (Node.js/Express)    │
│                       │     │                       │
│  ┌─────────────────┐  │     │  ┌─────────────────┐  │
│  │  用户界面组件   │  │     │  │   API 接口      │  │
│  └─────────────────┘  │     │  └─────────────────┘  │
│  ┌─────────────────┐  │     │  ┌─────────────────┐  │
│  │  数据可视化    │  │     │  │   业务逻辑      │  │
│  └─────────────────┘  │     │  └─────────────────┘  │
│  ┌─────────────────┐  │     │  ┌─────────────────┐  │
│  │  API 调用层    │──┼─────┼──┤   数据访问层    │  │
│  └─────────────────┘  │     │  └─────────────────┘  │
└───────────────────────┘     └───────────┬───────────┘
                                         │
                                         ▼
┌───────────────────────────────────────────────────────┐
│                     数据存储层                         │
│                 (MySQL 数据库)                        │
└───────────────────────────────────────────────────────┘
2. 技术栈详解
后端技术
Node.js：作为服务器运行环境，提供高性能的事件驱动和非阻塞 I/O 模型。
Express.js：轻量级 Web 应用框架，简化路由和中间件管理。
MySQL2：MySQL 数据库驱动，支持 Promise API 和连接池管理。
Yahoo Finance2 API：获取实时股票价格、历史数据和市场指标。
CORS：处理跨域资源共享，确保前端与后端的安全通信。
Nodemon：开发环境自动重启工具，提高开发效率。
JWT (JSON Web Token)：用于用户认证和授权，确保 API 安全性。
前端技术
HTML5/CSS：构建语义化结构和响应式布局。
JavaScript：实现交互逻辑和数据处理。
Chart.js：绘制各种金融图表，包括折线图、柱状图和饼图。
Fetch API：处理与后端 API 的数据交互。
Tailwind CSS：提供工具类优先的 CSS 框架，加速 UI 开发。
Font Awesome：集成图标库，增强用户界面视觉效果。
三、数据库设计
1. 数据模型
系统使用关系型数据库设计，主要实体包括：

投资组合(Portfolio)
├── 组合ID (主键)
├── 用户ID (外键)
├── 组合名称
├── 组合描述
├── 创建时间
└── 更新时间

资产(Asset)
├── 资产ID (主键)
├── 资产代码
├── 资产名称
├── 资产类型 (股票/债券/基金/加密货币等)
├── 市场
├── 货币
└── 最新价格

组合资产(PortfolioAsset)
├── 记录ID (主键)
├── 组合ID (外键)
├── 资产ID (外键)
├── 持有数量
├── 平均成本
├── 购买日期
└── 备注

交易记录(Transaction)
├── 交易ID (主键)
├── 组合ID (外键)
├── 资产ID (外键)
├── 交易类型 (买入/卖出)
├── 交易数量
├── 交易价格
├── 交易费用
├── 交易日期
└── 交易状态
2. 数据库关系图
User ──┬── Portfolio ──┬── PortfolioAsset
       │              │
       │              └── Transaction
       │
       └── Transaction
四、API 设计
1. 用户认证 API
POST /api/auth/register
- 功能：用户注册
- 请求体：{ username, email, password }
- 响应：JWT Token

POST /api/auth/login
- 功能：用户登录
- 请求体：{ email, password }
- 响应：JWT Token

GET /api/auth/me
- 功能：获取当前用户信息
- 认证：需要 JWT Token
- 响应：用户对象
2. 投资组合 API
GET /api/portfolio
- 功能：获取当前用户的所有投资组合
- 认证：需要 JWT Token
- 响应：投资组合列表

POST /api/portfolio
- 功能：创建新投资组合
- 认证：需要 JWT Token
- 请求体：{ name, description }
- 响应：新创建的投资组合对象

GET /api/portfolio/:id
- 功能：获取单个投资组合详情
- 认证：需要 JWT Token
- 响应：投资组合对象及关联资产

PUT /api/portfolio/:id
- 功能：更新投资组合信息
- 认证：需要 JWT Token
- 请求体：{ name, description }
- 响应：更新后的投资组合对象

DELETE /api/portfolio/:id
- 功能：删除投资组合
- 认证：需要 JWT Token
- 响应：操作结果消息
3. 资产 API
GET /api/assets
- 功能：获取资产列表（支持搜索和筛选）
- 参数：q（搜索关键词）, type（资产类型）
- 响应：资产列表

GET /api/assets/:symbol
- 功能：获取单个资产详情
- 响应：资产对象及最新价格信息

GET /api/assets/:symbol/history
- 功能：获取资产历史价格数据
- 参数：period（时间周期）, interval（数据间隔）
- 响应：历史价格数据数组
4. 组合资产 API
GET /api/portfolio/:portfolioId/assets
- 功能：获取投资组合中的所有资产
- 认证：需要 JWT Token
- 响应：资产列表及持有信息

POST /api/portfolio/:portfolioId/assets
- 功能：添加资产到投资组合
- 认证：需要 JWT Token
- 请求体：{ assetSymbol, quantity, purchasePrice, purchaseDate }
- 响应：更新后的投资组合资产列表

PUT /api/portfolio/:portfolioId/assets/:assetId
- 功能：更新投资组合中的资产信息
- 认证：需要 JWT Token
- 请求体：{ quantity, purchasePrice }
- 响应：更新后的资产持有信息

DELETE /api/portfolio/:portfolioId/assets/:assetId
- 功能：从投资组合中移除资产
- 认证：需要 JWT Token
- 响应：操作结果消息
5. 交易记录 API
GET /api/portfolio/:portfolioId/transactions
- 功能：获取投资组合的交易历史
- 认证：需要 JWT Token
- 响应：交易记录列表

POST /api/portfolio/:portfolioId/transactions
- 功能：记录新交易
- 认证：需要 JWT Token
- 请求体：{ assetSymbol, type, quantity, price, fee, date }
- 响应：新创建的交易记录

GET /api/transactions/:id
- 功能：获取单个交易详情
- 认证：需要 JWT Token
- 响应：交易记录对象
6. 绩效分析 API
GET /api/portfolio/:portfolioId/performance
- 功能：获取投资组合绩效分析
- 认证：需要 JWT Token
- 参数：period（时间周期）
- 响应：绩效指标（收益率、波动率、夏普比率等）

GET /api/portfolio/:portfolioId/valuehistory
- 功能：获取投资组合价值历史数据
- 认证：需要 JWT Token
- 参数：period（时间周期）
- 响应：历史价值数据数组

GET /api/portfolio/:portfolioId/assetallocation
- 功能：获取投资组合资产配置
- 认证：需要 JWT Token
- 响应：按资产类别、行业等分类的配置数据
五、前端实现细节
1. 页面结构
登录 / 注册页面
简洁的表单设计，支持邮箱 / 密码认证
表单验证和错误提示
密码加密传输
仪表盘页面
概览卡片：显示总资产价值、今日收益、总收益等关键指标
投资组合绩效图表：展示组合价值历史趋势
资产配置饼图：可视化展示各类资产占比
最近交易记录列表
投资组合管理页面
投资组合列表：支持创建、编辑和删除操作
组合详情面板：显示组合资产构成和绩效数据
资产添加 / 移除功能
交易记录管理
资产搜索与分析页面
高级搜索功能：支持按代码、名称、类型筛选
资产详情卡片：显示实时价格、历史走势图
基本面数据展示：市盈率、市净率、股息率等
添加到投资组合功能
交易记录页面
交易历史表格：支持筛选和排序
新交易录入表单
交易统计图表
绩效分析页面
多周期收益率图表
风险指标分析（波动率、最大回撤等）
投资组合对比分析
收益来源分解
2. 前端交互设计
响应式布局：适配桌面、平板和移动设备
动态数据加载：使用无限滚动和懒加载优化性能
实时数据更新：WebSocket 连接实现价格实时推送
交互动画：平滑过渡、悬停效果和加载动画
数据可视化：多种图表类型展示金融数据
模态对话框：重要操作确认和表单输入
通知系统：操作反馈和系统消息提示
六、后端实现细节
1. 服务器架构
模块化路由：按功能划分路由模块（用户、组合、资产等）
中间件系统：
认证中间件：验证 JWT Token
权限中间件：控制资源访问权限
错误处理中间件：统一处理异常情况
服务层：分离业务逻辑和数据访问
数据访问层：封装数据库操作，提供统一接口
2. 关键业务逻辑
投资组合计算：实时计算组合价值、收益和资产配置
交易处理：买入 / 卖出逻辑，自动更新资产持有量和成本
价格同步：定时从金融 API 获取最新价格数据
绩效分析算法：计算各类绩效指标（收益率等）

七、部署与运维
1. 开发环境
本地开发：Node.js + MySQL
开发工具：VS Code、Postman、Git
调试工具：Chrome DevTools
2. 测试环境
集成测试：模拟数据库和 API 调用

